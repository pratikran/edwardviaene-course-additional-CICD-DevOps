Course Resources
Section 1, Lecture 2
DevOps Course Resources

Copy paste this to a text document on your local drive. You will need these URLs during the lectures.
URLs

    github: www.github.com
    chef: www.chef.io
    ansible: www.ansible.com
    Jenkins: https://jenkins-ci.org/

GIT repositories used

    https://github.com/wardviaene/ansible-demo
    https://github.com/wardviaene/chef-demo
    https://github.com/wardviaene/play-demo
    https://github.com/wardviaene/docker-demo

Instructions

    AWS Account: https://github.com/wardviaene/ansible-demo/raw/master/misc/AWSAccountCreation.pdf

Forum & Support

    Facebook: https://www.facebook.com/groups/840062592768074/


	
	

	
	
	
	
	

Git Commands Overview
Section 2, Lecture 7
GIT Resources
Creating a new repository

mkdir project

cd project

git init

git remote add origin git@github.com:yourlogin/your-repo.git

git add .

git commit -am “new repository”

git push -u origin master
Cloning existing repository

git clone https://github.com/username/your-repo.git
Creating branch

git checkout -b feature-1

# you are now in a branch, you can edit and create new files

git add .

git commit -am “new feature”
Merging branch to master

git checkout master

git merge feature-1

git push
Deleting branch

git branch -d feature-x
List all branches

git branch -a
Switch branch

git checkout feature-x
Switch to master branch

git checkout master
Listing Remote repositories

git remote -v
Replacing remote repository

# in case your remote repository changes, or you want to switch from HTTPS->SSH or SSH->HTTPS

git remote remove origin

git remote add origin git@github.com:yourlogin/your-repo.git
More resources

git commands: https://www.atlassian.com/git/tutorials/comparing-workflows/

git flow: http://danielkummer.github.io/git-flow-cheatsheet/
	
	
	
	
	
	
	
	
	
	
	

	

Vagrant for Windows Procedures
Section 3, Lecture 14
Vagrant for Windows procedures

Follow these procedures only if you want to use Vagrant with Windows.
1. Download the software

    Download the latest Virtualbox from https://www.virtualbox.org/
    Download the latest Vagrant from https://www.vagrantup.com/
    Download putty and puttygen from http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html

2. Convert the vagrant private key

Using puttygen you downloaded from the putty website, convert the OpenSSH private key to a putty-readable key:

    Make sure your vagrant box is running (vagrant up in project folder)
    Type the command vagrant ssh-config to display the ssh configuration. You can find the path to the private key next to IdentityFile
    Open puttygen
    Click on the Load button
    Navigate to the path shown by vagrant ssh-config (next to IdentityFile)
    Select the private_key
    Now click on the “Save private key” button and save the file as .ppk file somewhere where you can easily find it

3. Use putty to log into your Vagrant machines

Open putty and configure the following parameters:

    Session:
        Host: 127.0.0.1
        Port: 2222 and up (depends on how many vagrant machines you launch)
    Connection
        Data
            Auto-login username: vagrant
    Connection/SSH
        Auth
            Private key file for authentication: Click on browse and select your ppk file
    Session
        Save the session to save the parameters you just entered

4. Alternatives

    You can also use the login/password combination “vagrant” / “vagrant”, but then you will have to enter it manually every time
    When configuring vagrant in the next lectures, I’ll often use a private IP address. You can use this private IP address with port 22 instead of 127.0.0.1:2222

 
 
 
 
 
 
 
 

 

 
Jenkins Resources
Section 5, Lecture 37

Jenkins

These procedures are explained in the Jenkins lectures. Copy paste the contents of this file to a text file on your computer. To install jenkins yourself, you can copy paste the commands and URLs from this file.
Vagrantfile

Vagrant.configure(2) do |config|

config.vm.define "jenkins" do |jenkins|

jenkins.vm.box = "ubuntu/trusty64"

jenkins.vm.network "private_network", ip: "192.168.0.252"

jenkins.vm.hostname = “jenkins"

jenkins.vm.provider "virtualbox" do |v|

v.memory = 4096

v.cpus = 2

end

end

end
Jenkins Installation

wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -

sudo -s

echo "deb http://pkg.jenkins-ci.org/debian binary/" >> /etc/apt/sources.list

apt-get update

apt-get install jenkins

service jenkins start
Java 8 Installation

sudo add-apt-repository ppa:webupd8team/java -y

sudo apt-get update

sudo apt-get install oracle-java8-installer
sbt Installation

echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 642AC823

sudo apt-get update

sudo apt-get install sbt
Play framework

wget https://downloads.typesafe.com/typesafe-activator/1.3.6/typesafe-activator-1.3.6-minimal.zip

unzip typsafe-activator-*zip

mv activator-1.3.6-minimal/ bin

. .profile
Running the app

activator new example-app play-java

cd example-app

./activator run # optional
Version control

sudo apt-get install git

git init

git config --global user.email “your@email”

git config --global user.name “your name”

git add .

git commit -am “initial commit”

git remote add origin https://github.com/YOURUSERNAME/play-demo.git

git push -u origin master
Jenkins config

URL: http://192.168.0.252:8080

Plugins to install: git plugin & sbt

JVM config: JVM_HOME: /usr/lib/jvm/java-8-oracle

sbt config: sbt launcher jar: /usr/share/sbt-launcher-packaging/bin/sbt-launch.jar

sbt config: sbt launch arguments: -Xmx512M
Jenkins Packaging

enablePlugins(DebianPlugin)

maintainer := “Your Name <email@address>“

packageSummary := "My custom package"

packageDescription := "Package"
Jenkins Packaging shell script

./activator debian:packageBin
Jenkins artifact storage

sudo apt-get install rng-tools

sudo rngd -r /dev/urandom

sudo su - jenkins

gpg --gen-key

gpg --list-keys

gpg --keyserver keyserver.ubuntu.com --send-key PRIVATEKEYID

exit

sudo apt-get install nginx reprepro

sudo -s

mkdir -p /var/repositories

cd /var/repositories

mkdir conf

cd conf

touch options

cat << EOF > distributions

Codename: trusty

Components: main

Architectures: i386 amd64

SignWith: 06EFF9F7

EOF

chown -R jenkins:jenkins /var/repositories

cat << EOF > /etc/nginx/sites-available/default

server {

## Let your repository be the root directory

root /var/repositories;

access_log /var/log/nginx/repo.access.log;

error_log /var/log/nginx/repo.error.log;

## Prevent access to Reprepro's files

location ~ /(db|conf) {

deny all;

return 404;

}

}

EOF

service nginx restart
Jenkins reprepro

reprepro -b /var/repositories includedeb trusty ./target/example-app_*.deb














Kubernetes Procedures
Section 10, Lecture 68
Kubernetes Procedures
Installing Kubernetes
Install etcd

docker run --volume=/var/etcd:/var/etcd --net=host -d gcr.io/google_containers/etcd:2.0.12 /usr/local/bin/etcd --addr=127.0.0.1:4001 --bind-addr=0.0.0.0:4001 --data-dir=/var/etcd/data
Install the master

sudo docker run \

--volume=/:/rootfs:ro \

--volume=/sys:/sys:ro \

--volume=/dev:/dev \

--volume=/var/lib/docker/:/var/lib/docker:ro \

--volume=/var/lib/kubelet/:/var/lib/kubelet:rw \

--volume=/var/run:/var/run:rw \

--net=host \

--pid=host \

--privileged=true \

-d gcr.io/google_containers/hyperkube:v1.0.1 \

/hyperkube kubelet --containerized --hostname-override="127.0.0.1" --address="0.0.0.0" --api-servers=http://localhost:8080 --config=/etc/kubernetes/manifests
Run the service proxy

docker run -d --net=host --privileged gcr.io/google_containers/hyperkube:v1.0.1 /hyperkube proxy --master=http://127.0.0.1:8080 --v=2
Download kubectl

wget https://storage.googleapis.com/kubernetes-release/release/v1.0.1/bin/linux/amd64/kubectl

chmod +x kubectl

mkdir bin

mv kubectl bin

. .profile
Pod and Service Management
Create pod

kubectl create -f pod-file.yml
Create service

kubectl create -f service-file.yml
get pod info

kubectl list pod
Delete pod

kubectl delete pod podname
get service info

kubectl list serice
Delete pod

kubectl delete service servicename
Test an app

export SERVICE_IP=$(kubectl get service nginx-service -o=template -t={‌{.spec.clusterIP})

export SERVICE_PORT=$(kubectl get service nginx-service -o=template '-t={‌{(index .spec.ports 0).port}}')

curl http://${SERVICE_IP}:${SERVICE_PORT}






DevOps Challenge
	http://www.devopschallenge.co/



Sources and Further Readings
Section 12, Lecture 74

    http://www.slideshare.net/realgenekim/2014-state-of-devops-findings-velocity-conference
    http://www.scriptrock.com/automation-enterprise-devops-doing-it-wrong
    http://www.mobify.com/blog/devops-101-best-practices/
    http://www.slideshare.net/sanjeev-sharma/campdevops-keynote-devops-using-lean-to-eliminate-bottlenecks
    http://www.slideshare.net/pritiman/intro-to-devops-14053761
    http://www.slideshare.net/geekle/devops-5348895?next_slideshow=1
    http://en.wikipedia.org/wiki/DevOps
    http://12factor.net
    CD: http://continuousdelivery.com/
    GIT: https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow (CC License)
    git flow: http://danielkummer.github.io/git-flow-cheatsheet/
    kubernetes setup: https://github.com/kubernetes/kubernetes/blob/release-1.1/docs/getting-started-guides/docker.md
    The Phoenix Project (recommended book): http://www.amazon.com/The-Phoenix-Project-Helping-Business/dp/0988262592


	
	
